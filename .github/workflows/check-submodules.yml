name: Check Submodule Health

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  check-health:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Check submodule initialization
        run: |
          echo "## 🔍 Checking Submodule Health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if all submodules are initialized
          UNINIT_COUNT=$(git submodule status | grep -c "^-" || true)
          if [ "$UNINIT_COUNT" -gt 0 ]; then
            echo "⚠️ Warning: $UNINIT_COUNT uninitialized submodules found" >> $GITHUB_STEP_SUMMARY
            git submodule status | grep "^-" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All submodules are initialized" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for outdated submodules
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Submodule Update Status:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          OUTDATED_COUNT=0
          while IFS= read -r line; do
            SUBMODULE_PATH=$(echo "$line" | awk '{print $2}')
            if [ -d "$SUBMODULE_PATH" ]; then
              cd "$SUBMODULE_PATH"
              
              # Fetch latest from origin
              git fetch origin --quiet
              
              # Check if local is behind remote
              LOCAL=$(git rev-parse HEAD)
              REMOTE=$(git rev-parse origin/$(git rev-parse --abbrev-ref HEAD) 2>/dev/null || git rev-parse origin/main 2>/dev/null || git rev-parse origin/master)
              
              if [ "$LOCAL" != "$REMOTE" ]; then
                echo "📦 $SUBMODULE_PATH is outdated" >> $GITHUB_STEP_SUMMARY
                COMMITS_BEHIND=$(git rev-list --count HEAD..origin/$(git rev-parse --abbrev-ref HEAD) 2>/dev/null || echo "unknown")
                echo "   Behind by: $COMMITS_BEHIND commits" >> $GITHUB_STEP_SUMMARY
                OUTDATED_COUNT=$((OUTDATED_COUNT + 1))
              fi
              
              cd $GITHUB_WORKSPACE
            fi
          done < <(git submodule status)
          
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **$OUTDATED_COUNT submodules are outdated**" >> $GITHUB_STEP_SUMMARY
            echo "Run the 'Sync Submodules' workflow to update them." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All submodules are up to date**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Verify submodule accessibility
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Repository Accessibility:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          FAILED_COUNT=0
          while IFS= read -r line; do
            SUBMODULE_PATH=$(echo "$line" | awk '{print $2}')
            if [ -d "$SUBMODULE_PATH" ]; then
              cd "$SUBMODULE_PATH"
              
              # Get the remote URL
              REMOTE_URL=$(git config --get remote.origin.url)
              
              # Check if repository is accessible
              if git ls-remote --exit-code --heads "$REMOTE_URL" > /dev/null 2>&1; then
                echo "✅ $SUBMODULE_PATH - Accessible" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ $SUBMODULE_PATH - Not accessible or deleted" >> $GITHUB_STEP_SUMMARY
                FAILED_COUNT=$((FAILED_COUNT + 1))
              fi
              
              cd $GITHUB_WORKSPACE
            fi
          done < <(git submodule status)
          
          if [ "$FAILED_COUNT" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **$FAILED_COUNT repositories are not accessible**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Generate statistics
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Collection Statistics:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_SUBMODULES=$(git submodule status | wc -l)
          echo "- **Total Submodules**: $TOTAL_SUBMODULES" >> $GITHUB_STEP_SUMMARY
          
          # Count by category
          echo "- **Categories**:" >> $GITHUB_STEP_SUMMARY
          for dir in official-repositories yolo-implementations computer-vision community-projects web-apis tools-utilities educational-resources robotics-integration embedded-systems surveillance-security hackathon-projects; do
            if [ -d "$dir" ]; then
              COUNT=$(find "$dir" -maxdepth 1 -type d | tail -n +2 | wc -l)
              if [ "$COUNT" -gt 0 ]; then
                echo "  - $dir: $COUNT repos" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Check completed at $(date '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY